AWSTemplateFormatVersion: 2010-09-09
Description: "Service Mesh Trial"

Outputs:
  PublicEndpoint:
    Description: Public endpoint for the services
    Value: !Sub "http://${LoadBalancer.DNSName}"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ServiceMesh
        Parameters:
          - ServicesDomain

Parameters:
  ServicesDomain:
    Description: DNS namespace used by services
    Type: String
    Default: default.svc.cluster.local

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.10.0/24
    Public2:
      CIDR: 10.0.20.0/24
    Private1:
      CIDR: 10.0.30.0/24
    Private2:
      CIDR: 10.0.40.0/24

Resources:
  # Network
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [ SubnetConfig, VPC, CIDR ]
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !FindInMap [ SubnetConfig, Public1, CIDR ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet 1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !FindInMap [ SubnetConfig, Public2, CIDR ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet 2"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !FindInMap [ SubnetConfig, Private1, CIDR ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Subnet 1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !FindInMap [ SubnetConfig, Private2, CIDR ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Subnet 2"

  NatGatewayIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateSubnetRoute1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRoute2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Internal"

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} PrivateNetworkAcl"

  InboundVPNsPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !FindInMap [ SubnetConfig, VPC, CIDR ]

  InboundDynamicPortsPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  OutboundVPNsPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: !FindInMap [ SubnetConfig, VPC, CIDR ]

  OutBoundDynamicPortPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  OutboundHTTPPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  OutboundHTTPSPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 103
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  PrivateSubnetAcl1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnetAcl2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  SecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for public access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public access"

  SecurityGroupInternal:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for internal access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !FindInMap [ SubnetConfig, VPC, CIDR ]
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private access"

  SecurityGroupInternalIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupInternal
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroupInternal

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      SecurityGroups: [ !Ref 'SecurityGroupPublic' ]

  LoadBalancerListenerForPublicAPI:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupForPublicAPI
          Type: forward

  LoadBalancerRuleForPublicAPI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroupForPublicAPI
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: ["*"]
      ListenerArn: !Ref LoadBalancerListenerForPublicAPI
      Priority: 1

  TargetGroupForPublicAPI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      TargetType: ip
      Protocol: HTTP
      Port: 80
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 120
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      Matcher: 
        HttpCode: 200-299
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 6

  LoadBalancerListenerForProxy:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupForProxy
          Type: forward

  LoadBalancerRuleForProxy:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroupForProxy
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: ["*"]
      ListenerArn: !Ref LoadBalancerListenerForProxy
      Priority: 1

  TargetGroupForProxy:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      TargetType: ip
      Protocol: HTTP
      Port: 8080
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 120
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      Matcher: 
        HttpCode: 200-299
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 6

  # Service Mesh
  Mesh:
    Type: AWS::AppMesh::Mesh
    Properties:
      MeshName: !Sub ${AWS::StackName}-mesh

  VirtualServiceForAPI:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !GetAtt Mesh.MeshName
      VirtualServiceName: !Sub "api.${ServicesDomain}"
      Spec:
        Provider:
          VirtualRouter:
            VirtualRouterName: !GetAtt VirtualRouterForAPI.VirtualRouterName

  VirtualRouterForAPI:
    Type: AWS::AppMesh::VirtualRouter
    Properties:
      MeshName: !GetAtt Mesh.MeshName
      VirtualRouterName: !Sub "${AWS::StackName}-api"
      Spec:
        Listeners:
          - PortMapping:
              Protocol: http
              Port: 80

  RouteForAPI:
    Type: AWS::AppMesh::Route
    Properties:
      MeshName: !GetAtt Mesh.MeshName
      VirtualRouterName: !GetAtt VirtualRouterForAPI.VirtualRouterName
      RouteName: !Sub "${AWS::StackName}-api-route1"
      Spec:
        HttpRoute:
          Action:
            WeightedTargets:
              - VirtualNode: !GetAtt VirtualNodeForPublicAPI.VirtualNodeName
                Weight: 30
              - VirtualNode: !GetAtt VirtualNodeForPrivateAPI.VirtualNodeName
                Weight: 70
          Match:
            Prefix: "/"

  VirtualServiceForProxy:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !GetAtt Mesh.MeshName
      VirtualServiceName: !Sub "proxy.${ServicesDomain}"
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: !GetAtt VirtualNodeForProxy.VirtualNodeName

  # Service Discovery
  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Vpc: !Ref VPC
      Name: !Ref ServicesDomain

  # Application
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  LogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - application-autoscaling:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
            Resource: '*'

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: /

  # Public API (which has a public route via ELB)
  PublicApiTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: !Sub "${AWS::StackName}-public-api"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: IgnoredUID
            Value: "1234"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: AppPorts
            Value: "80"
          - Name: EgressIgnoredIPs
            Value: "169.254.170.2,169.254.169.254"
      ContainerDefinitions:
        - Name: api
          Image: pottava/http-re:1.4
          PortMappings: 
            - ContainerPort: 80
          Environment:
            - Name: API_PORT
              Value: "80"
            - Name: ACCESS_LOG
              Value: "true"
            - Name: APPLICATION_TYPE
              Value: "public"
          DependsOn:
            - ContainerName: envoy
              Condition: HEALTHY
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api
          Essential: true
        - Name: envoy
          Image: 111345817488.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-envoy:v1.9.1.0-prod
          PortMappings:
            - ContainerPort: 9901
            - ContainerPort: 15000
            - ContainerPort: 15001
          Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value: !Sub "mesh/${Mesh.MeshName}/virtualNode/${VirtualNodeForPublicAPI.VirtualNodeName}"
            - Name: ENVOY_LOG_LEVEL
              Value: info
            - Name: ENABLE_ENVOY_XRAY_TRACING
              Value: "1"
            - Name: ENABLE_ENVOY_STATS_TAGS
              Value: "1"
          User: "1234"
          Ulimits:
            - Name: "nofile"
              HardLimit: 15000
              SoftLimit: 15000
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"
            Interval: 5
            Timeout: 2
            Retries: 3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: envoy
          Essential: true
        - Name: xray-daemon
          Image: pottava/xray:3.1
          Command:
            - '--region'
            - !Ref AWS::Region
            - '--local-mode'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: xray
      Cpu: 256
      Memory: 512

  PublicApiService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref Cluster
      TaskDefinition: !Ref PublicApiTask
      LoadBalancers:
        - ContainerName: api
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroupForPublicAPI
      ServiceRegistries:
        - RegistryArn: !GetAtt CloudMapServicePublicAPI.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
          SecurityGroups: [ !Ref SecurityGroupInternal]
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 120
    DependsOn:
      - LoadBalancerListenerForPublicAPI
      - LoadBalancerRuleForPublicAPI

  CloudMapServicePublicAPI:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: api
      DnsConfig:
        NamespaceId: !GetAtt CloudMapNamespace.Id
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  VirtualNodeForPublicAPI:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !GetAtt Mesh.MeshName
      VirtualNodeName: !Sub "${AWS::StackName}-public-api"
      Spec:
        Listeners:
          - PortMapping:
              Protocol: http
              Port: 80
            HealthCheck:
              Protocol: http
              Path: "/health"
              HealthyThreshold: 2
              UnhealthyThreshold: 2
              TimeoutMillis: 2000
              IntervalMillis: 5000
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: !Ref ServicesDomain
            ServiceName: !GetAtt CloudMapServicePublicAPI.Name

  # Private API (which can be accessed only via App Mesh)
  PrivateApiTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-private-api"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: IgnoredUID
            Value: "1234"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: AppPorts
            Value: "80"
          - Name: EgressIgnoredIPs
            Value: "169.254.170.2,169.254.169.254"
      ContainerDefinitions:
        - Name: api
          Image: pottava/http-re:1.4
          PortMappings: 
            - ContainerPort: 80
          Environment:
            - Name: API_PORT
              Value: "80"
            - Name: ACCESS_LOG
              Value: "true"
            - Name: APPLICATION_TYPE
              Value: "private"
          DependsOn:
            - ContainerName: envoy
              Condition: HEALTHY
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api
          Essential: true
        - Name: envoy
          Image: 111345817488.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-envoy:v1.9.1.0-prod
          PortMappings:
            - ContainerPort: 9901
            - ContainerPort: 15000
            - ContainerPort: 15001
          Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value: !Sub "mesh/${Mesh.MeshName}/virtualNode/${VirtualNodeForPrivateAPI.VirtualNodeName}"
            - Name: ENVOY_LOG_LEVEL
              Value: info
            - Name: ENABLE_ENVOY_XRAY_TRACING
              Value: "1"
            - Name: ENABLE_ENVOY_STATS_TAGS
              Value: "1"
          User: "1234"
          Ulimits:
            - Name: "nofile"
              HardLimit: 15000
              SoftLimit: 15000
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"
            Interval: 5
            Timeout: 2
            Retries: 3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: envoy
          Essential: true
        - Name: xray-daemon
          Image: pottava/xray:3.1
          Command:
            - '--region'
            - !Ref AWS::Region
            - '--local-mode'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: xray
      Cpu: 256
      Memory: 512

  PrivateApiService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref Cluster
      TaskDefinition: !Ref PrivateApiTask
      ServiceRegistries:
        - RegistryArn: !GetAtt CloudMapServicePrivateAPI.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
          SecurityGroups: [ !Ref SecurityGroupInternal]
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  CloudMapServicePrivateAPI:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: private-api
      DnsConfig:
        NamespaceId: !GetAtt CloudMapNamespace.Id
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  VirtualNodeForPrivateAPI:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !GetAtt Mesh.MeshName
      VirtualNodeName: !Sub "${AWS::StackName}-private-api"
      Spec:
        Listeners:
          - PortMapping:
              Protocol: http
              Port: 80
            HealthCheck:
              Protocol: http
              Path: "/health"
              HealthyThreshold: 2
              UnhealthyThreshold: 2
              TimeoutMillis: 2000
              IntervalMillis: 5000
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: !Ref ServicesDomain
            ServiceName: !GetAtt CloudMapServicePrivateAPI.Name

  # Proxy (which has a public route via ELB)
  ProxyTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: !Sub "${AWS::StackName}-proxy"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: IgnoredUID
            Value: "1234"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: AppPorts
            Value: "8080"
          - Name: EgressIgnoredIPs
            Value: "169.254.170.2,169.254.169.254"
      ContainerDefinitions:
        - Name: proxy
          Image: pottava/proxy:1.1
          PortMappings: 
            - ContainerPort: 8080
          Environment:
            - Name: PROXY_URL
              Value: !Sub "http://${VirtualServiceForAPI.VirtualServiceName}"
            - Name: APP_PORT
              Value: "8080"
            - Name: BASIC_AUTH_USER
              Value: fargate
            - Name: BASIC_AUTH_PASS
              Value: "Pa$$w0rd"
            - Name: ACCESS_LOG
              Value: "true"
            - Name: HEALTHCHECK_PATH
              Value: /health
          DependsOn:
            - ContainerName: envoy
              Condition: HEALTHY
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: proxy
          Essential: true
        - Name: envoy
          Image: 111345817488.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-envoy:v1.9.1.0-prod
          PortMappings:
            - ContainerPort: 9901
            - ContainerPort: 15000
            - ContainerPort: 15001
          Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value: !Sub "mesh/${Mesh.MeshName}/virtualNode/${VirtualNodeForProxy.VirtualNodeName}"
            - Name: ENVOY_LOG_LEVEL
              Value: info
            - Name: ENABLE_ENVOY_XRAY_TRACING
              Value: "1"
            - Name: ENABLE_ENVOY_STATS_TAGS
              Value: "1"
          User: "1234"
          Ulimits:
            - Name: "nofile"
              HardLimit: 15000
              SoftLimit: 15000
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"
            Interval: 5
            Timeout: 2
            Retries: 3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: envoy
          Essential: true
        - Name: xray-daemon
          Image: pottava/xray:3.1
          Command:
            - '--region'
            - !Ref AWS::Region
            - '--local-mode'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: xray
      Cpu: 256
      Memory: 512

  ProxyService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref Cluster
      TaskDefinition: !Ref ProxyTask
      LoadBalancers:
        - ContainerName: proxy
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupForProxy
      ServiceRegistries:
        - RegistryArn: !GetAtt CloudMapServiceProxy.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
          SecurityGroups: [ !Ref SecurityGroupInternal]
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 120
    DependsOn:
      - LoadBalancerListenerForProxy
      - LoadBalancerRuleForProxy

  CloudMapServiceProxy:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: proxy
      DnsConfig:
        NamespaceId: !GetAtt CloudMapNamespace.Id
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  VirtualNodeForProxy:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !GetAtt Mesh.MeshName
      VirtualNodeName: !Sub "${AWS::StackName}-proxy"
      Spec:
        Listeners:
          - PortMapping:
              Protocol: http
              Port: 8080
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: !Ref ServicesDomain
            ServiceName: !GetAtt CloudMapServiceProxy.Name
        Backends:
          - VirtualService:
              VirtualServiceName: !GetAtt VirtualServiceForAPI.VirtualServiceName
